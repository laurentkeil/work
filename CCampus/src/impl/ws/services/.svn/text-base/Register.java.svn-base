
package impl.ws.services;

import java.io.*;
import java.security.Security;

import org.apache.http.HttpStatus;
import org.apache.commons.httpclient.Cookie;
import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.*;


/**
 * Enregistre l utilisateur ayant eu le droit de se connecter et récupère un cookie que l'on renvoie.
 * @author Keil Laurent
 */
public class Register {

	// init du client http
	private static HttpClient client = new HttpClient();
	//Initialisation de la méthode post avec l url ou la requete doit se faire
	public static PostMethod post = new PostMethod();
	
	/**
	 *  Envoie user et password en requête http 
	 *  et retourne un cookie généré par le serveur de claroline 
	 *  pour l'utilisateur connecté au serveur si celui-ci est validé.
	 * @param user : identifiant de l utilisateur voulant se connecter
	 * @param pw : password encodé par l'utilisateur voulant se connecter
	 * @return cookie : un cookie correspondant à l'utilisateur pouvant être recuperé pendant une session active.
	 * @throws IOException : en cas de mauvais encodage des informations pour l'envoie de la requete.
	 * @throws HttpException : en cas de problème sur le serveur ou de violation du protocole.
	 */
	public static String registerURL(String user, String pw, String url) throws HttpException, IOException {
		//gestion du certificat
		Security.setProperty("ssl.SocketFactory.provider",LazySSLSocketFactory.class.getName());
		
        //gestion de la connexion au serveur et récupération des cookies
		
		//Cookie cookie = new Cookie();		
		
		// utilisation du user-agent de firefox
		Header header = new Header("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11");
		
		//Initialisation de la méthode post avec l url ou la requete doit se faire
		post = new PostMethod(url);
		
		post.setRequestHeader(header);
		
		// ajout des parametres à la requête pour une authentification http
		post.addParameter("login", user);
		post.addParameter("password", pw);
			
		try{
			//envoie de la requête
			int status = client.executeMethod(post);
			 			
			if (status != HttpStatus.SC_OK) {
				System.err.println("Method failed: " + post.getStatusLine());
			}
			/*			 
			Cookie[] cookies = client.getState().getCookies();
			 //capture du cookie utile.
			cookie = cookies[0];	*/		   
					
		} catch (HttpException e) {
			System.err.println("Fatal protocol violation: " + e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			System.err.println("Fatal transport error: " + e.getMessage());
			e.printStackTrace();
		} 
		finally{		 
			//fermeture de la connexion		 
			post.releaseConnection();
		}
		return "ok";
	}	
	
	public static HttpClient getClient() {
		return client;
	}

}